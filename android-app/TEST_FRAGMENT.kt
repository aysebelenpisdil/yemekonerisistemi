// Bu kodu InventoryFragment.kt'nin setupRealTimeSearch() metoduna EKLE
// Detaylƒ± debug i√ßin

private fun setupRealTimeSearch() {
    android.util.Log.d("DEBUG", "======================================")
    android.util.Log.d("DEBUG", "setupRealTimeSearch() BA≈ûLADI")
    android.util.Log.d("DEBUG", "======================================")

    searchEditText.addTextChangedListener { editable ->
        val query = editable.toString().trim()

        android.util.Log.d("DEBUG", "----------------------------")
        android.util.Log.d("DEBUG", "Text deƒüi≈üti: '$query'")
        android.util.Log.d("DEBUG", "Query uzunluƒüu: ${query.length}")

        // √ñnceki arama job'ƒ±nƒ± iptal et
        searchJob?.cancel()
        android.util.Log.d("DEBUG", "√ñnceki job iptal edildi")

        // Eƒüer query bo≈üsa √∂nerileri gizle
        if (query.isEmpty()) {
            android.util.Log.d("DEBUG", "Query bo≈ü, √∂neriler gizleniyor")
            hideSuggestions()
            return@addTextChangedListener
        }

        // En az 2 karakter girilmi≈üse ara
        if (query.length >= 2) {
            android.util.Log.d("DEBUG", "‚úÖ Query >= 2 karakter, arama ba≈ülƒ±yor...")

            searchJob = lifecycleScope.launch {
                android.util.Log.d("DEBUG", "Coroutine ba≈üladƒ±")

                // 300ms bekle (debouncing)
                android.util.Log.d("DEBUG", "300ms bekleniyor (debouncing)...")
                delay(300)
                android.util.Log.d("DEBUG", "300ms tamamlandƒ±")

                try {
                    android.util.Log.d("DEBUG", "üîç Backend'e istek g√∂nderiliyor...")
                    android.util.Log.d("DEBUG", "   Query: '$query'")
                    android.util.Log.d("DEBUG", "   Limit: 20")
                    android.util.Log.d("DEBUG", "   URL: ${RetrofitClient.BASE_URL}/api/ingredients/?q=$query&limit=20")

                    // Backend'den fuzzy search ile ara (IO thread'de)
                    val response = withContext(Dispatchers.IO) {
                        android.util.Log.d("DEBUG", "IO thread'e ge√ßildi")
                        val result = RetrofitClient.apiService.searchIngredients(query, 20)
                        android.util.Log.d("DEBUG", "API √ßaƒürƒ±sƒ± tamamlandƒ±")
                        result
                    }

                    android.util.Log.d("DEBUG", "Main thread'e d√∂n√ºld√º")
                    android.util.Log.d("DEBUG", "üì° Response alƒ±ndƒ±")
                    android.util.Log.d("DEBUG", "   HTTP Code: ${response.code()}")
                    android.util.Log.d("DEBUG", "   Success: ${response.isSuccessful}")
                    android.util.Log.d("DEBUG", "   Body null?: ${response.body() == null}")

                    if (response.isSuccessful && response.body() != null) {
                        val results = response.body()!!.results
                        val ingredientNames = results.map { it.name }

                        android.util.Log.d("DEBUG", "‚úÖ BA≈ûARILI!")
                        android.util.Log.d("DEBUG", "   Sonu√ß sayƒ±sƒ±: ${ingredientNames.size}")
                        android.util.Log.d("DEBUG", "   ƒ∞lk 5 sonu√ß: ${ingredientNames.take(5)}")

                        // UI g√ºncelle
                        if (ingredientNames.isNotEmpty()) {
                            android.util.Log.d("DEBUG", "showSuggestions() √ßaƒürƒ±lƒ±yor...")
                            showSuggestions(ingredientNames)
                            android.util.Log.d("DEBUG", "showSuggestions() tamamlandƒ±")
                        } else {
                            android.util.Log.d("DEBUG", "Sonu√ß yok, √∂neriler gizleniyor")
                            hideSuggestions()
                        }
                    } else {
                        android.util.Log.e("DEBUG", "‚ùå API HATASI!")
                        android.util.Log.e("DEBUG", "   HTTP Code: ${response.code()}")
                        android.util.Log.e("DEBUG", "   Error Body: ${response.errorBody()?.string()}")
                        hideSuggestions()
                    }
                } catch (e: Exception) {
                    android.util.Log.e("DEBUG", "üí• EXCEPTION!")
                    android.util.Log.e("DEBUG", "   Mesaj: ${e.message}")
                    android.util.Log.e("DEBUG", "   Tip: ${e.javaClass.simpleName}")
                    android.util.Log.e("DEBUG", "   Stack trace:")
                    e.printStackTrace()

                    Toast.makeText(
                        context,
                        "Backend hatasƒ±: ${e.message}",
                        Toast.LENGTH_LONG
                    ).show()
                    hideSuggestions()
                }
            }
        } else {
            android.util.Log.d("DEBUG", "‚ùå Query < 2 karakter (${query.length}), arama yapƒ±lmƒ±yor")
            hideSuggestions()
        }

        android.util.Log.d("DEBUG", "----------------------------")
    }

    android.util.Log.d("DEBUG", "======================================")
    android.util.Log.d("DEBUG", "setupRealTimeSearch() TAMAMLANDI")
    android.util.Log.d("DEBUG", "TextWatcher listener kuruldu")
    android.util.Log.d("DEBUG", "======================================")
}
