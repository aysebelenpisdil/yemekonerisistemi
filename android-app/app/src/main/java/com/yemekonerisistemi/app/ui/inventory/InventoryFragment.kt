package com.yemekonerisistemi.app.ui.inventory

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.button.MaterialButton
import com.yemekonerisistemi.app.R
import com.yemekonerisistemi.app.api.RetrofitClient
import com.yemekonerisistemi.app.models.InventoryItem
import kotlinx.coroutines.launch

/**
 * Envanter (Buzdolabƒ±) Fragment
 * Spec Kit'e g√∂re TEMEL i≈ülevsellik:
 * - Backend'den malzeme arama
 * - Buzdolabƒ±na ekleme
 * - Miktar y√∂netimi
 */
class InventoryFragment : Fragment() {

    private lateinit var searchAutoComplete: AutoCompleteTextView
    private lateinit var filterButton: MaterialButton
    private lateinit var addButton: MaterialButton
    private lateinit var findRecipesButton: MaterialButton
    private lateinit var categoriesRecyclerView: RecyclerView
    private lateinit var inventoryAdapter: InventoryAdapter

    // Malzeme listesi (buzdolabƒ±)
    private val inventoryItems = mutableListOf<InventoryItem>()

    // Backend'den gelen t√ºm malzeme isimleri
    private var allIngredientNames = listOf<String>()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_inventory, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // View'larƒ± baƒüla
        searchAutoComplete = view.findViewById(R.id.searchAutoComplete)
        filterButton = view.findViewById(R.id.filterButton)
        addButton = view.findViewById(R.id.addButton)
        findRecipesButton = view.findViewById(R.id.findRecipesButton)
        categoriesRecyclerView = view.findViewById(R.id.categoriesRecyclerView)

        // RecyclerView kurulumu
        setupRecyclerView()

        // Backend'den malzeme isimlerini y√ºkle
        loadIngredientNames()

        // Filtre butonu
        filterButton.setOnClickListener {
            // TODO: Filtre bottom sheet g√∂ster (FAZ 3'te implement edilecek)
            Toast.makeText(context, "Filtre √∂zelliƒüi yakƒ±nda eklenecek!", Toast.LENGTH_SHORT).show()
        }

        // Malzeme ekleme butonu
        addButton.setOnClickListener {
            val ingredientName = searchAutoComplete.text.toString().trim()
            if (ingredientName.isNotEmpty()) {
                addIngredient(ingredientName)
                searchAutoComplete.text.clear()
            } else {
                Toast.makeText(context, "L√ºtfen bir malzeme girin", Toast.LENGTH_SHORT).show()
            }
        }

        // Tarif bulma butonu
        findRecipesButton.setOnClickListener {
            if (inventoryItems.isNotEmpty()) {
                // Tarif listesi ekranƒ±na git
                findNavController().navigate(R.id.action_inventory_to_recipeList)
            } else {
                Toast.makeText(context, "En az bir malzeme ekleyin", Toast.LENGTH_SHORT).show()
            }
        }

        // Demo malzemeler ekle (ilk a√ßƒ±lƒ±≈üta)
        if (inventoryItems.isEmpty()) {
            addSampleIngredients()
        }
    }

    private fun setupRecyclerView() {
        inventoryAdapter = InventoryAdapter(
            items = inventoryItems,
            onQuantityChanged = { _ ->
                updateIngredientDisplay()
            },
            onItemDeleted = { item ->
                Toast.makeText(context, "${item.name} silindi", Toast.LENGTH_SHORT).show()
                updateIngredientDisplay()
            }
        )

        categoriesRecyclerView.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = inventoryAdapter
        }
    }

    /**
     * Backend'den t√ºm malzeme isimlerini y√ºkle (autocomplete i√ßin)
     */
    private fun loadIngredientNames() {
        lifecycleScope.launch {
            try {
                val response = RetrofitClient.apiService.getIngredientNames()
                if (response.isSuccessful && response.body() != null) {
                    allIngredientNames = response.body()!!
                    setupAutoComplete(allIngredientNames)
                } else {
                    Toast.makeText(
                        context,
                        "Malzemeler y√ºklenemedi: ${response.code()}",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            } catch (e: Exception) {
                Toast.makeText(
                    context,
                    "Backend'e baƒülanƒ±lamƒ±yor. Backend'in √ßalƒ±≈ütƒ±ƒüƒ±ndan emin olun.",
                    Toast.LENGTH_LONG
                ).show()
                // Offline fallback - demo isimleri
                setupAutoCompleteFallback()
            }
        }
    }

    /**
     * AutoComplete setup
     */
    private fun setupAutoComplete(ingredientNames: List<String>) {
        val adapter = ArrayAdapter(
            requireContext(),
            android.R.layout.simple_dropdown_item_1line,
            ingredientNames
        )
        searchAutoComplete.setAdapter(adapter)
        searchAutoComplete.threshold = 2 // 2 karakterden sonra √∂ner
    }

    /**
     * Offline fallback - Backend √ßalƒ±≈ümƒ±yorsa demo isimler
     */
    private fun setupAutoCompleteFallback() {
        val demoNames = listOf(
            "Domates", "Biber", "Soƒüan", "Tavuk", "Et", "Yumurta",
            "S√ºt", "Peynir", "Makarna", "Pirin√ß", "Mercimek",
            "Patates", "Havu√ß", "Salatalƒ±k", "Marul"
        )
        setupAutoComplete(demoNames)
    }

    /**
     * Malzeme ekleme
     */
    private fun addIngredient(ingredientName: String) {
        // Aynƒ± isimde malzeme varsa miktarƒ±nƒ± artƒ±r
        val existingItem = inventoryItems.find {
            it.name.equals(ingredientName, ignoreCase = true)
        }

        if (existingItem != null) {
            existingItem.quantity++
            inventoryAdapter.updateItem(existingItem)
            Toast.makeText(context, "$ingredientName miktarƒ± artƒ±rƒ±ldƒ±", Toast.LENGTH_SHORT).show()
        } else {
            // Yeni malzeme ekle
            val newItem = InventoryItem(
                name = ingredientName,
                quantity = 1,
                unit = "adet"
            )
            inventoryAdapter.addItem(newItem)
            Toast.makeText(context, "$ingredientName eklendi", Toast.LENGTH_SHORT).show()
        }

        updateIngredientDisplay()
    }

    /**
     * Buton metnini g√ºncelle
     */
    private fun updateIngredientDisplay() {
        val totalItems = inventoryItems.sumOf { it.quantity }
        findRecipesButton.text = "TARƒ∞FLERƒ∞ BUL üç≥ (${inventoryItems.size} √ße≈üit, $totalItems adet)"
    }

    /**
     * Demo malzemeler (ilk a√ßƒ±lƒ±≈üta)
     */
    private fun addSampleIngredients() {
        val sampleIngredients = listOf(
            InventoryItem(name = "Yumurta", quantity = 6, unit = "adet"),
            InventoryItem(name = "Domates", quantity = 3, unit = "adet"),
            InventoryItem(name = "Tavuk G√∂ƒüs√º", quantity = 2, unit = "adet"),
            InventoryItem(name = "Biber", quantity = 4, unit = "adet"),
            InventoryItem(name = "Soƒüan", quantity = 2, unit = "adet")
        )
        inventoryItems.addAll(sampleIngredients)
        inventoryAdapter.notifyDataSetChanged()
        updateIngredientDisplay()
    }
}
